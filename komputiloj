#!/usr/bin/env bash

set -Eeu -o pipefail

determine_here() {
	(
		cd -- "$(dirname -- "$0")"
		pwd -P
	)
}
export KOMPUTILOJ_PATH=$(determine_here)
printf 'Using KOMPUTILOJ_PATH=%q\n' "$KOMPUTILOJ_PATH" >&2

# Determine the source we use as nixpkgs in nixos-rebuild etcetera:
DEFAULT_NIXOS=$(nix-instantiate --eval "$KOMPUTILOJ_PATH" -A default_nixos | egrep -o '[^"]+')

if command -v nom &> /dev/null; then
	do_nix_build() {
		nix-build --log-format internal-json -v "$@" |& nom --json
	}
else
	do_nix_build() {
		nix-build "$@"
	}
fi

main() {
	local cmd
	local cmdpath
	
	if [[ "$#" -eq 0 ]]; then
		printf 'Usage: %q COMMAND\n' "$0" >&2
		exit 1
	fi

	cmd="$1"
	shift
	case "$cmd" in
		update-sources)
			do_update_sources
		;;
		nixos-rebuild)
			do_nixos_rebuild "$@"
		;;
		cleanup)
			do_cleanup "$@"
		;;
		backup)
			do_backup "$@"
		;;
		*)
			cmdpath=commands."$cmd"
			export NIX_PATH=komputiloj="$KOMPUTILOJ_PATH"
			# The stupid attrset is a trick to prevent a multiple derivations to be built in case of a mistake in the nix files.
			# nix-build otherwise happily builds multiple derivations and we would execute an arbitrary one of them :-(
			do_nix_build -E '{ cmd }: { force-single-derivation = (builtins.getAttr cmd (import <komputiloj>).commands); }' \
				--argstr cmd "$cmd" \
				--out-link "$KOMPUTILOJ_PATH"/results/"$cmdpath"
			"$KOMPUTILOJ_PATH"/results/"$cmdpath" "$@"
		;;
	esac
}

do_update_sources() {
	for source_dir in "$KOMPUTILOJ_PATH"/sources.d/*; do
		if [[ -d "$source_dir" ]]; then
		(
			cd -- "$source_dir"
			if [[ -x update ]]; then
				printf 'Updating source %s\n' "$source_dir" >&2
				./update
			else
				printf 'Skipping source without update script: %s\n' "$source_dir" >&2
			fi
		)
		fi
	done
}

do_nixos_rebuild() {
	local nixpkgs_path

	printf 'Using nixpkgs source %q\n' "$DEFAULT_NIXOS" >&2
	nixpkgs_path=$(nix-instantiate --eval "$KOMPUTILOJ_PATH" -A sources."$DEFAULT_NIXOS".nix_path | egrep -o '[^"]+')
	nixos_config="$KOMPUTILOJ_PATH/machines.d/$HOSTNAME/compat.nix"
	printf 'Using configuration from %q\n' "$nixos_config" >&2
	export NIX_PATH="komputiloj=$KOMPUTILOJ_PATH:nixpkgs=$nixpkgs_path:nixos-config=$nixos_config"
	printf 'Using nixos-rebuild from PATH\n' >&2
	exec sudo -E nixos-rebuild "$@"
}

do_cleanup() {
	local host

	if [[ "$#" -ne 1 ]]; then
		printf 'Usage: %q cleanup HOSTNAME\n' "$0" >&2
		return 1
	fi

	host="$1"
	if [[ "$host" = "$HOSTNAME" ]]; then
		echo "Doing local nix garbage collection..."
		sudo nix-collect-garbage
		echo
		echo "Garbage was collected. However,"
		echo "there might be lingering old system generations:"
		echo
		sudo nix-env -p /nix/var/nix/profiles/system --list-generations
		echo
		echo "To delete:"
		echo "    sudo nix-env -p /nix/var/nix/profiles/system --delete-generations NUMBER..."
		echo "    sudo nix-collect-garbage"
	else
	case "$host" in
		gently)
			# TODO study https://nixos.wiki/wiki/Storage_optimization
			# for an automated solution.
			ssh root@gently.radstand.nl nix-collect-garbage -d
		;;
		scarif)
			ssh root@scarif.radstand.nl nix-collect-garbage
			echo
			echo "Garbage was collected. However,"
			echo "there might be lingering old system generations:"
			echo
			ssh root@scarif.radstand.nl nix-env -p /nix/var/nix/profiles/system --list-generations
			echo
			echo "To delete:"
			echo "    ssh root@scarif nix-env -p /nix/var/nix/profiles/system --delete-generations NUMBER..."
			echo "    ssh root@scarif nix-collect-garbage"
		;;
		*)
			printf "Don't know how to clean up host %q.\n" "$host" >&2
			return 1
		;;
	esac
	fi
}

do_backup() {
	if [[ "$#" -ne 0 ]]; then
		printf 'Usage: %q backup\n' "$0" >&2
		return 1
	fi
	
	echo "FIRST: backup-storage"
	sudo -E "$KOMPUTILOJ_PATH"/bin/backup-storage
	echo
	echo "THEN: backup-bigstorage1"
	sudo -E "$KOMPUTILOJ_PATH"/bin/backup-bigstorage1
}

main "$@"
